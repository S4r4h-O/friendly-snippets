{
    "classConstructor": {
        "prefix": "con",
        "body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
        "description": "Adds a default constructor for the class that contains props as arguments"
    },
    "classConstructorContext": {
        "prefix": "conc",
        "body": "constructor (props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
        "description": "Adds a default constructor for the class that contains props and context as arguments"
    },
    "componentDidMount": {
        "prefix": "cdm",
        "body": "componentDidMount () {\n\t$0\n}\n",
        "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
    },
    "componentGetDerivedStateFromProps": {
        "prefix": "cgd",
        "body": "\nstatic getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
        "description": "Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates."
    },
    "shouldComponentUpdate": {
        "prefix": "scu",
        "body": "shouldComponentUpdate (nextProps, nextState) {\n\t$0\n}\n",
        "description": "Invoked before rendering when new props or state are being received. "
    },
    "componentDidUpdate": {
        "prefix": "cdup",
        "body": "componentDidUpdate (prevProps, prevState) {\n\t$0\n}\n",
        "description": "Invoked immediately after the component's updates are flushed to the DOM."
    },
    "componentWillUnmount": {
        "prefix": "cwun",
        "body": "componentWillUnmount () {\n\t$0\n}\n",
        "description": "Invoked immediately before a component is unmounted from the DOM."
    },
    "componentRender": {
        "prefix": "ren",
        "body": "render () {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
        "description": "When called, it should examine this.props and this.state and return a single child element."
    },
    "jsx element": {
        "prefix": "j",
        "body": "<${1:elementName}>\n\t$0\n</${1}>",
        "description": "an element"
    },
    "jsx element self closed": {
        "prefix": "jc",
        "body": "<${1:elementName} />",
        "description": "an element self closed"
    },
    "jsx elements map": {
        "prefix": "jm",
        "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
        "description": "an element self closed"
    },
    "jsx elements map with return": {
        "prefix": "jmr",
        "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
        "description": "an element self closed"
    },
    "jsx element wrap selection": {
        "prefix": "jsx wrap selection with element",
        "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
        "description": "an element"
    },
    "useState": {
        "prefix": "us",
        "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initValue})$0",
        "description": "React useState() hook"
    },
    "useEffect": {
        "prefix": "ue",
        "body": ["useEffect(() => {", "\t$1", "}, [${3:dependencies}])$0"],
        "description": "React useEffect() hook"
    },
    "useEffect with cleanup": {
        "prefix": "uec",
        "body": [
            "useEffect(() => {",
            "\t$1",
            "\n\treturn () => {",
            "\t\t$2",
            "\t}",
            "}, [${3:dependencies}])$0"
        ],
        "description": "React useEffect() hook with a cleanup function"
    },
    "createContext": {
        "prefix": "cc",
        "body": [
            "export const $1 = createContext<$2>(",
            "\t(null as any) as $2",
            ")"
        ],
        "description": "creates a react context"
    },
    "useContext": {
        "prefix": "uc",
        "body": ["const $1 = useContext($2)$0"],
        "description": "React useContext() hook"
    },
    "useRef": {
        "prefix": "ur",
        "body": ["const ${1:elName}El = useRef(null)$0"],
        "description": "React useRef() hook"
    },
    "useCallback": {
        "prefix": "ucb",
        "body": [
            "const ${1:memoizedCallback} = useCallback(",
            "\t() => {",
            "\t\t${2:doSomething}(${3:a}, ${4:b})",
            "\t},",
            "\t[${5:a}, ${6:b}],",
            ")$0"
        ],
        "description": "React useCallback() hook"
    },
    "useMemo": {
        "prefix": "ume",
        "body": [
            "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
        ],
        "description": "React useMemo() hook"
    },
    "createReactHook": {
        "prefix": "crh",
        "body": ["export const use$0 = () => {", "", "}"],
        "description": "Create React Hook"
    },
    "createReactHookWithName": {
        "prefix": "crhn",
        "body": ["export const ${TM_FILENAME_BASE} = () => {", "\t$0", "}"],
        "description": "Create React Hook using File name"
    },
    "describeBlock": {
        "prefix": "desc",
        "body": ["describe('$1', () => {", "  $0", "})", ""],
        "description": "Testing `describe` block"
    },
    "testBlock": {
        "prefix": "test",
        "body": ["test('should $1', () => {", "  $0", "})", ""],
        "description": "Testing `test` block"
    },
    "itBlock": {
        "prefix": "tit",
        "body": ["it('should $1', () => {", "  $0", "})", ""],
        "description": "Testing `it` block"
    },
    "itAsyncBlock": {
        "prefix": "tita",
        "body": ["it('should $1', async () => {", "  $0", "})", ""],
        "description": "Testing async `it` block"
    },
    "export react component": {
        "prefix": "erc",
        "body": "export const ${1:ComponentName} = (${2:props}) => {\n\t${0}\n}"
    },
    "export react component typed": {
        "prefix": "erct",
        "body": "export const ${1:ComponentName} = (${2:props}: ${3:Props}) => {\n\t${0}\n}"
    },
    "export default react component": {
        "prefix": "edrc",
        "body": "export default function ${1:ComponentName}(${2:props}) {\n\t${0}\n}"
    },
    "export default react component typed": {
        "prefix": "edrct",
        "body": "export default function ${1:ComponentName}(${2:props}: ${3:Props}) {\n\t${0}\n}"
    },
    "export default async react component": {
        "prefix": "edrac",
        "body": "export default async function ${1:ComponentName}(${2:props}) {\n\t${0}\n}"
    },
    "export default async react component typed": {
        "prefix": "edract",
        "body": "export default async function ${1:ComponentName}(${2:props}: ${3:Props}) {\n\t${0}\n}"
    }
}
